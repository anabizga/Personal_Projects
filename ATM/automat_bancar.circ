<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit10" val="2"/>
      <a name="bit11" val="2"/>
      <a name="bit12" val="3"/>
      <a name="bit13" val="3"/>
      <a name="bit14" val="3"/>
      <a name="bit15" val="3"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="1"/>
      <a name="bit5" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="2"/>
      <a name="bit9" val="2"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="16"/>
    </tool>
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="NEXYS4_DDR"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <boardmap boardname="NEXYS4_DDR">
      <mc key="/Input_1" map="521,91"/>
    </boardmap>
    <comp lib="0" loc="(110,70)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(110,90)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(1220,790)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="7"/>
    </comp>
    <comp lib="0" loc="(1240,890)" name="Splitter">
      <a name="fanout" val="7"/>
      <a name="incoming" val="7"/>
    </comp>
    <comp lib="0" loc="(1320,670)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="NU_COINCID"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1470,130)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="PIN_INCORECT"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(150,550)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="OPTIUNE"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(150,840)" name="Clock"/>
    <comp lib="0" loc="(1910,340)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="EROARE_RETRAGERE"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(270,1090)" name="Constant"/>
    <comp lib="0" loc="(320,1100)" name="Ground"/>
    <comp lib="0" loc="(320,1140)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(360,1060)" name="Constant"/>
    <comp lib="0" loc="(390,1080)" name="Ground"/>
    <comp lib="0" loc="(390,1120)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(430,1050)" name="Constant"/>
    <comp lib="0" loc="(450,1100)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(460,1070)" name="Ground"/>
    <comp lib="0" loc="(470,1040)" name="Ground"/>
    <comp lib="0" loc="(500,740)" name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit10" val="2"/>
      <a name="bit11" val="2"/>
      <a name="bit12" val="3"/>
      <a name="bit13" val="3"/>
      <a name="bit14" val="3"/>
      <a name="bit15" val="3"/>
      <a name="bit2" val="0"/>
      <a name="bit3" val="0"/>
      <a name="bit4" val="1"/>
      <a name="bit5" val="1"/>
      <a name="bit6" val="1"/>
      <a name="bit7" val="1"/>
      <a name="bit8" val="2"/>
      <a name="bit9" val="2"/>
      <a name="facing" val="west"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="16"/>
    </comp>
    <comp lib="0" loc="(530,1080)" name="Splitter">
      <a name="facing" val="north"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(530,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="PIN_NOU1"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(530,630)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="PIN_NOU2"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(540,1040)" name="Constant"/>
    <comp lib="0" loc="(600,120)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="NR_CARD"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(800,1060)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(890,120)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(900,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(920,380)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="SUMA"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="0" loc="(970,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="PIN_CARD"/>
      <a name="radix" val="16"/>
      <a name="width" val="16"/>
    </comp>
    <comp lib="1" loc="(1290,670)" name="Controlled Inverter"/>
    <comp lib="1" loc="(1330,130)" name="Controlled Inverter"/>
    <comp lib="1" loc="(1800,340)" name="Controlled Inverter"/>
    <comp lib="5" loc="(1380,820)" name="7-Segment Display">
      <a name="active" val="false"/>
      <a name="decimalPoint" val="false"/>
    </comp>
    <comp lib="5" loc="(1450,820)" name="7-Segment Display">
      <a name="active" val="false"/>
      <a name="decimalPoint" val="false"/>
    </comp>
    <comp lib="5" loc="(1510,820)" name="7-Segment Display">
      <a name="active" val="false"/>
      <a name="decimalPoint" val="false"/>
    </comp>
    <comp lib="5" loc="(1580,820)" name="7-Segment Display">
      <a name="active" val="false"/>
      <a name="decimalPoint" val="false"/>
      <a name="labelvisible" val="true"/>
    </comp>
    <comp loc="(1100,800)" name="BcdTo7Seg">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1190,160)" name="comparator_pin">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="comparator_pin_1"/>
    </comp>
    <comp loc="(1200,340)" name="comparator_sold">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="comparator_sold_1"/>
    </comp>
    <comp loc="(1210,610)" name="scazator_sold">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="scazator_sold_1"/>
    </comp>
    <comp loc="(1250,470)" name="comparator_1000">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1490,350)" name="SAU_2_INTRARI">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="sau_2_intrari_1"/>
    </comp>
    <comp loc="(1500,470)" name="SAU_2_INTRARI">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(1750,400)" name="SI_2_intrari">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(370,70)" name="uc">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(380,530)" name="dmux">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="dmux_1"/>
    </comp>
    <comp loc="(400,840)" name="counter">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(790,790)" name="mux_bcd">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(800,1060)" name="mux_bcd">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(820,590)" name="comparator_pin">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="comparator_pin_2"/>
    </comp>
    <comp loc="(840,150)" name="ram_pin">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ram_pin_1"/>
    </comp>
    <comp loc="(840,320)" name="ram_sold">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="ram_sold_1"/>
    </comp>
    <wire from="(10,150)" to="(10,290)"/>
    <wire from="(10,150)" to="(150,150)"/>
    <wire from="(10,290)" to="(1750,290)"/>
    <wire from="(1030,490)" to="(1040,490)"/>
    <wire from="(110,70)" to="(150,70)"/>
    <wire from="(110,90)" to="(120,90)"/>
    <wire from="(1100,800)" to="(1210,800)"/>
    <wire from="(1190,130)" to="(1190,160)"/>
    <wire from="(1190,130)" to="(1300,130)"/>
    <wire from="(1190,30)" to="(1190,130)"/>
    <wire from="(120,90)" to="(120,520)"/>
    <wire from="(120,90)" to="(150,90)"/>
    <wire from="(1200,340)" to="(1270,340)"/>
    <wire from="(1200,360)" to="(1270,360)"/>
    <wire from="(1210,560)" to="(1210,610)"/>
    <wire from="(1210,790)" to="(1210,800)"/>
    <wire from="(1210,790)" to="(1220,790)"/>
    <wire from="(1210,800)" to="(1210,890)"/>
    <wire from="(1210,890)" to="(1240,890)"/>
    <wire from="(1240,670)" to="(1240,710)"/>
    <wire from="(1240,670)" to="(1260,670)"/>
    <wire from="(1250,470)" to="(1280,470)"/>
    <wire from="(1250,490)" to="(1280,490)"/>
    <wire from="(1260,820)" to="(1340,820)"/>
    <wire from="(1260,830)" to="(1350,830)"/>
    <wire from="(1260,840)" to="(1350,840)"/>
    <wire from="(1260,850)" to="(1340,850)"/>
    <wire from="(1260,860)" to="(1330,860)"/>
    <wire from="(1260,870)" to="(1320,870)"/>
    <wire from="(1260,880)" to="(1310,880)"/>
    <wire from="(1270,340)" to="(1270,350)"/>
    <wire from="(1270,360)" to="(1270,370)"/>
    <wire from="(1270,680)" to="(1270,730)"/>
    <wire from="(1290,670)" to="(1320,670)"/>
    <wire from="(130,480)" to="(130,530)"/>
    <wire from="(130,480)" to="(380,480)"/>
    <wire from="(130,530)" to="(160,530)"/>
    <wire from="(1310,140)" to="(1310,150)"/>
    <wire from="(1310,150)" to="(1410,150)"/>
    <wire from="(1310,880)" to="(1310,940)"/>
    <wire from="(1310,940)" to="(1630,940)"/>
    <wire from="(1320,870)" to="(1320,920)"/>
    <wire from="(1320,920)" to="(1620,920)"/>
    <wire from="(1330,130)" to="(1470,130)"/>
    <wire from="(1330,860)" to="(1330,910)"/>
    <wire from="(1330,910)" to="(1400,910)"/>
    <wire from="(1340,790)" to="(1340,820)"/>
    <wire from="(1340,790)" to="(1380,790)"/>
    <wire from="(1340,850)" to="(1340,900)"/>
    <wire from="(1340,900)" to="(1390,900)"/>
    <wire from="(1350,800)" to="(1350,830)"/>
    <wire from="(1350,800)" to="(1390,800)"/>
    <wire from="(1350,840)" to="(1350,890)"/>
    <wire from="(1350,890)" to="(1380,890)"/>
    <wire from="(1380,790)" to="(1380,820)"/>
    <wire from="(1380,790)" to="(1450,790)"/>
    <wire from="(1380,880)" to="(1380,890)"/>
    <wire from="(1380,890)" to="(1450,890)"/>
    <wire from="(1390,800)" to="(1390,820)"/>
    <wire from="(1390,800)" to="(1460,800)"/>
    <wire from="(1390,880)" to="(1390,900)"/>
    <wire from="(1390,900)" to="(1460,900)"/>
    <wire from="(1400,760)" to="(1400,820)"/>
    <wire from="(1400,760)" to="(1470,760)"/>
    <wire from="(1400,880)" to="(1400,910)"/>
    <wire from="(1400,910)" to="(1470,910)"/>
    <wire from="(1410,810)" to="(1410,820)"/>
    <wire from="(1410,810)" to="(1480,810)"/>
    <wire from="(1410,90)" to="(1410,150)"/>
    <wire from="(1450,790)" to="(1450,820)"/>
    <wire from="(1450,790)" to="(1510,790)"/>
    <wire from="(1450,880)" to="(1450,890)"/>
    <wire from="(1450,890)" to="(1510,890)"/>
    <wire from="(1460,800)" to="(1460,820)"/>
    <wire from="(1460,800)" to="(1520,800)"/>
    <wire from="(1460,880)" to="(1460,900)"/>
    <wire from="(1460,900)" to="(1520,900)"/>
    <wire from="(1470,760)" to="(1470,820)"/>
    <wire from="(1470,760)" to="(1530,760)"/>
    <wire from="(1470,880)" to="(1470,910)"/>
    <wire from="(1470,910)" to="(1530,910)"/>
    <wire from="(1480,810)" to="(1480,820)"/>
    <wire from="(1480,810)" to="(1540,810)"/>
    <wire from="(1490,350)" to="(1490,400)"/>
    <wire from="(1490,400)" to="(1530,400)"/>
    <wire from="(150,550)" to="(160,550)"/>
    <wire from="(150,840)" to="(180,840)"/>
    <wire from="(1500,440)" to="(1500,470)"/>
    <wire from="(1500,440)" to="(1530,440)"/>
    <wire from="(1510,790)" to="(1510,820)"/>
    <wire from="(1510,790)" to="(1580,790)"/>
    <wire from="(1510,880)" to="(1510,890)"/>
    <wire from="(1510,890)" to="(1580,890)"/>
    <wire from="(1520,800)" to="(1520,820)"/>
    <wire from="(1520,800)" to="(1590,800)"/>
    <wire from="(1520,880)" to="(1520,900)"/>
    <wire from="(1520,900)" to="(1590,900)"/>
    <wire from="(1530,420)" to="(1530,440)"/>
    <wire from="(1530,760)" to="(1530,820)"/>
    <wire from="(1530,760)" to="(1600,760)"/>
    <wire from="(1530,880)" to="(1530,910)"/>
    <wire from="(1530,910)" to="(1600,910)"/>
    <wire from="(1540,810)" to="(1540,820)"/>
    <wire from="(1540,810)" to="(1610,810)"/>
    <wire from="(1580,790)" to="(1580,820)"/>
    <wire from="(1580,880)" to="(1580,890)"/>
    <wire from="(1590,800)" to="(1590,820)"/>
    <wire from="(1590,880)" to="(1590,900)"/>
    <wire from="(1600,760)" to="(1600,820)"/>
    <wire from="(1600,760)" to="(1630,760)"/>
    <wire from="(1600,880)" to="(1600,910)"/>
    <wire from="(1610,810)" to="(1610,820)"/>
    <wire from="(1610,810)" to="(1620,810)"/>
    <wire from="(1620,810)" to="(1620,920)"/>
    <wire from="(1630,760)" to="(1630,940)"/>
    <wire from="(1750,290)" to="(1750,340)"/>
    <wire from="(1750,340)" to="(1750,400)"/>
    <wire from="(1750,340)" to="(1770,340)"/>
    <wire from="(1780,350)" to="(1780,360)"/>
    <wire from="(1780,360)" to="(1860,360)"/>
    <wire from="(1800,340)" to="(1910,340)"/>
    <wire from="(1860,270)" to="(1860,360)"/>
    <wire from="(20,130)" to="(150,130)"/>
    <wire from="(20,130)" to="(20,680)"/>
    <wire from="(20,680)" to="(830,680)"/>
    <wire from="(270,1090)" to="(280,1090)"/>
    <wire from="(280,1090)" to="(280,1120)"/>
    <wire from="(290,1100)" to="(290,1120)"/>
    <wire from="(290,1100)" to="(300,1100)"/>
    <wire from="(30,230)" to="(150,230)"/>
    <wire from="(30,230)" to="(30,640)"/>
    <wire from="(30,640)" to="(380,640)"/>
    <wire from="(300,1100)" to="(300,1120)"/>
    <wire from="(300,1100)" to="(310,1100)"/>
    <wire from="(310,1100)" to="(310,1120)"/>
    <wire from="(310,1100)" to="(320,1100)"/>
    <wire from="(320,1140)" to="(580,1140)"/>
    <wire from="(350,1080)" to="(350,1100)"/>
    <wire from="(350,1080)" to="(370,1080)"/>
    <wire from="(360,1060)" to="(360,1100)"/>
    <wire from="(370,1080)" to="(370,1100)"/>
    <wire from="(370,1080)" to="(380,1080)"/>
    <wire from="(370,110)" to="(460,110)"/>
    <wire from="(370,130)" to="(380,130)"/>
    <wire from="(370,150)" to="(440,150)"/>
    <wire from="(370,170)" to="(470,170)"/>
    <wire from="(370,190)" to="(390,190)"/>
    <wire from="(370,210)" to="(530,210)"/>
    <wire from="(370,230)" to="(450,230)"/>
    <wire from="(370,250)" to="(540,250)"/>
    <wire from="(370,70)" to="(480,70)"/>
    <wire from="(370,90)" to="(950,90)"/>
    <wire from="(380,1080)" to="(380,1100)"/>
    <wire from="(380,1080)" to="(390,1080)"/>
    <wire from="(380,130)" to="(380,480)"/>
    <wire from="(380,530)" to="(410,530)"/>
    <wire from="(380,550)" to="(430,550)"/>
    <wire from="(380,570)" to="(450,570)"/>
    <wire from="(380,590)" to="(380,640)"/>
    <wire from="(390,1120)" to="(580,1120)"/>
    <wire from="(390,190)" to="(390,460)"/>
    <wire from="(40,110)" to="(150,110)"/>
    <wire from="(40,30)" to="(1190,30)"/>
    <wire from="(40,30)" to="(40,110)"/>
    <wire from="(400,840)" to="(440,840)"/>
    <wire from="(410,1070)" to="(410,1080)"/>
    <wire from="(410,1070)" to="(420,1070)"/>
    <wire from="(410,400)" to="(410,530)"/>
    <wire from="(420,1070)" to="(420,1080)"/>
    <wire from="(420,1070)" to="(440,1070)"/>
    <wire from="(430,1050)" to="(430,1080)"/>
    <wire from="(430,380)" to="(430,550)"/>
    <wire from="(440,1070)" to="(440,1080)"/>
    <wire from="(440,1070)" to="(460,1070)"/>
    <wire from="(440,150)" to="(440,270)"/>
    <wire from="(440,270)" to="(960,270)"/>
    <wire from="(440,750)" to="(440,810)"/>
    <wire from="(440,750)" to="(480,750)"/>
    <wire from="(440,810)" to="(570,810)"/>
    <wire from="(440,840)" to="(440,910)"/>
    <wire from="(440,910)" to="(510,910)"/>
    <wire from="(450,1100)" to="(580,1100)"/>
    <wire from="(450,230)" to="(450,360)"/>
    <wire from="(450,360)" to="(620,360)"/>
    <wire from="(450,370)" to="(450,570)"/>
    <wire from="(450,760)" to="(450,830)"/>
    <wire from="(450,760)" to="(480,760)"/>
    <wire from="(450,830)" to="(570,830)"/>
    <wire from="(460,110)" to="(460,340)"/>
    <wire from="(460,340)" to="(620,340)"/>
    <wire from="(460,770)" to="(460,850)"/>
    <wire from="(460,770)" to="(480,770)"/>
    <wire from="(460,850)" to="(570,850)"/>
    <wire from="(470,1040)" to="(490,1040)"/>
    <wire from="(470,170)" to="(470,510)"/>
    <wire from="(470,510)" to="(980,510)"/>
    <wire from="(480,170)" to="(620,170)"/>
    <wire from="(480,70)" to="(480,170)"/>
    <wire from="(480,780)" to="(480,870)"/>
    <wire from="(480,870)" to="(570,870)"/>
    <wire from="(490,1040)" to="(490,1060)"/>
    <wire from="(490,1040)" to="(500,1040)"/>
    <wire from="(50,170)" to="(150,170)"/>
    <wire from="(50,170)" to="(50,400)"/>
    <wire from="(50,400)" to="(410,400)"/>
    <wire from="(50,460)" to="(390,460)"/>
    <wire from="(50,460)" to="(50,860)"/>
    <wire from="(50,860)" to="(180,860)"/>
    <wire from="(500,1040)" to="(500,1060)"/>
    <wire from="(500,1040)" to="(510,1040)"/>
    <wire from="(500,740)" to="(850,740)"/>
    <wire from="(510,1040)" to="(510,1060)"/>
    <wire from="(510,790)" to="(510,910)"/>
    <wire from="(510,790)" to="(570,790)"/>
    <wire from="(510,910)" to="(510,930)"/>
    <wire from="(510,930)" to="(570,930)"/>
    <wire from="(520,1050)" to="(520,1060)"/>
    <wire from="(520,1050)" to="(540,1050)"/>
    <wire from="(530,1080)" to="(580,1080)"/>
    <wire from="(530,190)" to="(530,210)"/>
    <wire from="(530,190)" to="(620,190)"/>
    <wire from="(530,610)" to="(600,610)"/>
    <wire from="(530,630)" to="(590,630)"/>
    <wire from="(540,1040)" to="(540,1050)"/>
    <wire from="(540,250)" to="(540,590)"/>
    <wire from="(540,590)" to="(540,730)"/>
    <wire from="(540,590)" to="(600,590)"/>
    <wire from="(540,730)" to="(1270,730)"/>
    <wire from="(570,1060)" to="(580,1060)"/>
    <wire from="(570,930)" to="(570,1060)"/>
    <wire from="(580,140)" to="(580,150)"/>
    <wire from="(580,140)" to="(610,140)"/>
    <wire from="(580,150)" to="(580,320)"/>
    <wire from="(580,150)" to="(620,150)"/>
    <wire from="(580,320)" to="(620,320)"/>
    <wire from="(590,210)" to="(590,630)"/>
    <wire from="(590,210)" to="(620,210)"/>
    <wire from="(590,630)" to="(600,630)"/>
    <wire from="(600,120)" to="(610,120)"/>
    <wire from="(600,380)" to="(600,560)"/>
    <wire from="(600,380)" to="(620,380)"/>
    <wire from="(600,560)" to="(1210,560)"/>
    <wire from="(610,120)" to="(610,140)"/>
    <wire from="(70,190)" to="(150,190)"/>
    <wire from="(70,190)" to="(70,380)"/>
    <wire from="(70,380)" to="(430,380)"/>
    <wire from="(790,790)" to="(860,790)"/>
    <wire from="(80,520)" to="(120,520)"/>
    <wire from="(80,520)" to="(80,880)"/>
    <wire from="(80,880)" to="(180,880)"/>
    <wire from="(820,590)" to="(830,590)"/>
    <wire from="(830,590)" to="(830,680)"/>
    <wire from="(830,680)" to="(830,710)"/>
    <wire from="(830,710)" to="(1240,710)"/>
    <wire from="(840,150)" to="(870,150)"/>
    <wire from="(840,320)" to="(850,320)"/>
    <wire from="(850,320)" to="(850,740)"/>
    <wire from="(850,320)" to="(870,320)"/>
    <wire from="(860,790)" to="(860,800)"/>
    <wire from="(860,800)" to="(880,800)"/>
    <wire from="(870,120)" to="(870,150)"/>
    <wire from="(870,120)" to="(890,120)"/>
    <wire from="(870,150)" to="(930,150)"/>
    <wire from="(870,250)" to="(870,320)"/>
    <wire from="(870,250)" to="(900,250)"/>
    <wire from="(870,320)" to="(920,320)"/>
    <wire from="(90,210)" to="(150,210)"/>
    <wire from="(90,210)" to="(90,370)"/>
    <wire from="(90,370)" to="(450,370)"/>
    <wire from="(920,320)" to="(920,360)"/>
    <wire from="(920,360)" to="(960,360)"/>
    <wire from="(920,380)" to="(930,380)"/>
    <wire from="(930,150)" to="(930,180)"/>
    <wire from="(930,180)" to="(970,180)"/>
    <wire from="(930,380)" to="(930,490)"/>
    <wire from="(930,380)" to="(980,380)"/>
    <wire from="(930,490)" to="(1030,490)"/>
    <wire from="(930,490)" to="(930,650)"/>
    <wire from="(930,650)" to="(990,650)"/>
    <wire from="(950,160)" to="(970,160)"/>
    <wire from="(950,90)" to="(1410,90)"/>
    <wire from="(950,90)" to="(950,160)"/>
    <wire from="(960,270)" to="(1860,270)"/>
    <wire from="(960,270)" to="(960,340)"/>
    <wire from="(960,340)" to="(970,340)"/>
    <wire from="(960,360)" to="(960,630)"/>
    <wire from="(960,360)" to="(980,360)"/>
    <wire from="(960,630)" to="(990,630)"/>
    <wire from="(970,340)" to="(970,470)"/>
    <wire from="(970,340)" to="(980,340)"/>
    <wire from="(970,470)" to="(1030,470)"/>
    <wire from="(980,510)" to="(980,610)"/>
    <wire from="(980,610)" to="(990,610)"/>
  </circuit>
  <vhdl name="ram_pin">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
USE ieee.numeric_std.all;

&#13;
ENTITY ram_pin IS&#13;
  PORT (&#13;
  		NR_CARD: in std_logic_vector(3 downto 0);
  		START: in std_logic;
  		WE: in std_logic;
  		PIN: out std_logic_vector(15 downto 0);
  		PIN_NOU: in std_logic_vector(15 downto 0)
    );&#13;
END ram_pin;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF ram_pin IS&#13;
&#13;
type MATRIX is array(0 to 15) of std_logic_vector(15 downto 0);
signal M: MATRIX :=(x"7589",x"4875",x"2248",x"3000",x"4000",x"0533",x"6849",x"7233",x"8134",x"0900",x"1643",x"0344",x"9845",x"7775",x"4398",x"3333");	
BEGIN

process(START,NR_CARD,WE)
begin
	case START is
	when '1' =&gt;
		if WE = '0' then 
		case NR_CARD is
			when x"0" =&gt; PIN&lt;=M(0);
			when x"1" =&gt; PIN&lt;=M(1);
			when x"2" =&gt; PIN&lt;=M(2);
			when x"3" =&gt; PIN&lt;=M(3);
			when x"4" =&gt; PIN&lt;=M(4);
			when x"5" =&gt; PIN&lt;=M(5);
			when x"6" =&gt; PIN&lt;=M(6);
			when x"7" =&gt; PIN&lt;=M(7);
			when x"8" =&gt; PIN&lt;=M(8);
			when x"9" =&gt; PIN&lt;=M(9);
			when x"A" =&gt; PIN&lt;=M(10);
			when x"B" =&gt; PIN&lt;=M(11);
			when x"C" =&gt; PIN&lt;=M(12);
			when x"D" =&gt; PIN&lt;=M(13);
			when x"E" =&gt; PIN&lt;=M(14);
			when x"F" =&gt; PIN&lt;=M(15);
			when others =&gt; PIN&lt;="ZZZZZZZZZZZZZZZZ";
		end case;
		end if;
	when others =&gt; 
		if WE = '1' then
		M(to_integer(unsigned(NR_CARD))) &lt;= PIN_NOU;
		end if;
	end case;
end process;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="ram_sold">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
USE ieee.numeric_std.all;
&#13;
ENTITY ram_sold IS&#13;
  PORT (&#13;
  		NR_CARD: in std_logic_vector(3 downto 0);
  		START: in std_logic;
  		WE: in std_logic;
  		SOLD: out std_logic_vector(15 downto 0);
  		SOLD_NOU: in std_logic_vector(15 downto 0)&#13;
    );&#13;
END ram_sold;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF ram_sold IS&#13;
&#13;
&#13;type MATRIX is array(0 to 15) of std_logic_vector(15 downto 0);
signal M: MATRIX :=(x"3000",x"3500",x"2500",x"3000",x"4000",x"0533",x"6849",x"7233",x"8134",x"0900",x"1643",x"0344",x"9845",x"7775",x"4398",x"3333");	
BEGIN

process(START,NR_CARD,WE,SOLD_NOU)
begin
	case START is
	when '1' =&gt;
		if WE = '0' then 
		case NR_CARD is
			when x"0" =&gt; SOLD&lt;=M(0);
			when x"1" =&gt; SOLD&lt;=M(1);
			when x"2" =&gt; SOLD&lt;=M(2);
			when x"3" =&gt; SOLD&lt;=M(3);
			when x"4" =&gt; SOLD&lt;=M(4);
			when x"5" =&gt; SOLD&lt;=M(5);
			when x"6" =&gt; SOLD&lt;=M(6);
			when x"7" =&gt; SOLD&lt;=M(7);
			when x"8" =&gt; SOLD&lt;=M(8);
			when x"9" =&gt; SOLD&lt;=M(9);
			when x"A" =&gt; SOLD&lt;=M(10);
			when x"B" =&gt; SOLD&lt;=M(11);
			when x"C" =&gt; SOLD&lt;=M(12);
			when x"D" =&gt; SOLD&lt;=M(13);
			when x"E" =&gt; SOLD&lt;=M(14);
			when x"F" =&gt; SOLD&lt;=M(15);
			when others =&gt; SOLD&lt;="ZZZZZZZZZZZZZZZZ";
		end case;
		elsif WE = '1' then 
		M(to_integer(unsigned(NR_CARD))) &lt;= SOLD_NOU;
		end if;
	when others =&gt; SOLD &lt;= "ZZZZZZZZZZZZZZZZ";
	end case;
end process;
&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="comparator_pin">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY comparator_pin IS&#13;
  PORT (&#13;
  		ENABLE_COMP: in std_logic;
  		PIN_1: in std_logic_vector (15 downto 0);
  		PIN_2: in std_logic_vector (15 downto 0);
  		EGAL: out std_logic
    );&#13;
END comparator_pin;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF comparator_pin IS&#13;
&#13;
BEGIN&#13;
process(ENABLE_COMP,PIN_1,PIN_2)
begin

case ENABLE_COMP is
when '1' =&gt;
	if PIN_1 = PIN_2 then
		EGAL &lt;= '1';
	else
		EGAL &lt;= '0';
	end if;
when others =&gt; EGAL &lt;= '0';
end case;

end process;&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="comparator_sold">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY comparator_sold IS&#13;
  PORT (&#13;
  		ENABLE_COMP: in std_logic;
  		SOLD_CURENT: in std_logic_vector (15 downto 0);
  		SOLD_RETRAS: in std_logic_vector (15 downto 0);
  		EGAL: out std_logic;
  		MAI_MIC: out std_logic
    );&#13;
END comparator_sold;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF comparator_sold IS&#13;
&#13;
BEGIN
process(ENABLE_COMP,SOLD_CURENT,SOLD_RETRAS)
begin
MAI_MIC &lt;= '0'; EGAL &lt;= '0';
case ENABLE_COMP is
when '1' =&gt;
	if SOLD_CURENT = SOLD_RETRAS then
		EGAL &lt;= '1'; MAI_MIC &lt;= '0';
	elsif SOLD_RETRAS &lt; SOLD_CURENT then
		MAI_MIC &lt;= '1'; EGAL &lt;= '0';
	else
		MAI_MIC &lt;= '0'; EGAL &lt;= '0';
	end if;
when others =&gt; EGAL &lt;= '0'; MAI_MIC &lt;= '0';
end case;

end process;

&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="SAU_2_INTRARI">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY SAU_2_INTRARI IS&#13;
  PORT (&#13;
  		A: in std_logic;
  		B: in std_logic;
  		Y: out std_logic
    );&#13;
END SAU_2_INTRARI;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF SAU_2_INTRARI IS&#13;
&#13;
BEGIN&#13;
&#13;
Y &lt;= A or B;&#13;

END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="scazator_sold">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
use ieee.numeric_std.all;
&#13;
ENTITY scazator_sold IS&#13;
  PORT (&#13;
  		ENABLE_SCAZATOR: in std_logic;
  		SOLD_CURENT: in std_logic_vector (15 downto 0);
  		SOLD_RETRAS: in std_logic_vector (15 downto 0);
  		SOLD_NOU: out std_logic_vector (15 downto 0)
    );&#13;
END scazator_sold;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF scazator_sold IS&#13;
&#13;
BEGIN&#13;
process(ENABLE_SCAZATOR,SOLD_CURENT,SOLD_RETRAS)
begin

case ENABLE_SCAZATOR is 
when '1' =&gt;
	SOLD_NOU &lt;= std_logic_vector(signed(SOLD_CURENT) - signed(SOLD_RETRAS));
when others =&gt; SOLD_NOU &lt;= x"0000";
end case;
end process;&#13;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="dmux">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY dmux IS&#13;
  PORT (&#13;
  		enable: in std_logic;
  		sel: in std_logic_vector (1 downto 0);
  		dout0, dout1, dout2, dout3: out std_logic
    );&#13;
END dmux;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF dmux IS&#13;
&#13;
BEGIN&#13;
process (enable, sel)&#13;
begin
	case enable is
	when '1'=&gt;
		case sel is
			when "00" =&gt; dout0 &lt;= '1'; dout1 &lt;= '0'; dout2 &lt;= '0'; dout3 &lt;= '0';
			when "01" =&gt; dout0 &lt;= '0'; dout1 &lt;= '1'; dout2 &lt;= '0'; dout3 &lt;= '0';
			when "10" =&gt; dout0 &lt;= '0'; dout1 &lt;= '0'; dout2 &lt;= '1'; dout3 &lt;= '0';
			when "11" =&gt; dout0 &lt;= '0'; dout1 &lt;= '0'; dout2 &lt;= '0'; dout3 &lt;= '1';
			when others =&gt;dout0 &lt;= '0'; dout1 &lt;= '0'; dout2 &lt;= '0'; dout3 &lt;= '0';
		end case;
	when others=&gt;
		dout0 &lt;= '0'; dout1 &lt;= '0'; dout2 &lt;= '0'; dout3 &lt;= '0';
	end case;
&#13;end process;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="BcdTo7Seg">LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY BcdTo7Seg IS
  PORT (
  	input: in std_logic_vector (3 downto 0);
  	seg: out std_logic_vector (6 downto 0)
    	);
END BcdTo7Seg;

ARCHITECTURE TypeArchitecture OF BcdTo7Seg IS

BEGIN

	seg &lt;= "0000001" when input = x"0" else
	 "1001111" when input = x"1" else
	 "0010010" when input = x"2" else
	 "0000110" when input = x"3" else
	 "1001100" when input = x"4" else
	 "0100100" when input = x"5" else
	 "0100000" when input = x"6" else
	 "0001111" when input = x"7" else
	 "0000000" when input = x"8" else
	 "0000100" when input = x"9" else
	 "0001000" when input = x"A" else
	 "1100000" when input = x"B" else
	 "0110000" when input = x"C" else
	 "1000010" when input = x"D" else
	 "0110000" when input = x"E" else
	 "0111000" when input = x"F" else
	 "1111111";
	

END TypeArchitecture;
</vhdl>
  <vhdl name="uc">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY uc IS&#13;
  PORT (&#13;
  		clock, reset, egal1, egal2, comparator_sold, optiune1, optiune2, optiune3, optiune4: in std_logic;
  		start_pin, pin_en_comp, start_sold, en_dmux, sold_en_comp, en_scazator, afisor, we1, we2, pin_en_comp2: out std_logic
    );&#13;
END uc;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF uc IS&#13;
&#13;type STARE_T is(START, PIN_VERIF, ALEGERE_OPT, OPTIUNE_1, OPTIUNE_2, COMPARARE_SUMA, SUMA_RETRAGERE, OPTIUNE_3, SCHIMBARE_PIN, OPTIUNE_4);
signal STARE, NXSTARE: STARE_T;
BEGIN&#13;
&#13;
ACTUALIZEAZA_STARE: process(reset, clock)
begin
	case reset is
	when '1' =&gt;
		STARE &lt;= START;
	when others=&gt;
		if CLOCK = '1' and clock'event then
			STARE &lt;= NXSTARE;
		end if;
	end case;
end process ACTUALIZEAZA_STARE;

TRANSITIONS: process (STARE, egal1, egal2, comparator_sold, optiune1, optiune2, optiune3, optiune4)
begin&#13;
--initializari
start_pin &lt;= '0';
pin_en_comp &lt;= '0';
start_sold &lt;= '0';
en_dmux &lt;= '0';
sold_en_comp &lt;= '0';
en_scazator &lt;= '0';
pin_en_comp &lt;= '0';
afisor &lt;= '0';
we1 &lt;= '0';
we2 &lt;= '0';
pin_en_comp2 &lt;= '0';

case STARE is
	when START =&gt; start_pin &lt;= '1'; pin_en_comp &lt;= '0';
start_sold &lt;= '0';
en_dmux &lt;= '0';
sold_en_comp &lt;= '0';
en_scazator &lt;= '0';
pin_en_comp &lt;= '0';
afisor &lt;= '0';
we1 &lt;= '0';
we2 &lt;= '0';
pin_en_comp2 &lt;= '0';
NXSTARE &lt;= PIN_VERIF;
	when PIN_VERIF =&gt; start_pin &lt;= '1'; pin_en_comp &lt;= '1';
		if egal1 = '1' then NXSTARE &lt;= ALEGERE_OPT;
		else NXSTARE &lt;= START;
		end if;
	when ALEGERE_OPT =&gt; en_dmux &lt;= '1';
		if optiune1 = '1' then NXSTARE &lt;= OPTIUNE_1;
		elsif optiune2 = '1' then NXSTARE &lt;= OPTIUNE_2;
		elsif optiune3 = '1' then NXSTARE &lt;= OPTIUNE_3;
		elsif optiune4 = '1' then NXSTARE &lt;= OPTIUNE_4;
		end if;
	when OPTIUNE_1 =&gt; start_sold &lt;= '1'; afisor &lt;= '1'; NXSTARE &lt;= START;
	when OPTIUNE_2 =&gt; start_sold &lt;= '1'; NXSTARE &lt;= COMPARARE_SUMA;
	when COMPARARE_SUMA =&gt; start_sold &lt;= '1'; sold_en_comp &lt;= '1';
		if comparator_sold = '1' then NXSTARE &lt;= SUMA_RETRAGERE;
		else NXSTARE &lt;= OPTIUNE_2;
		end if;
	when SUMA_RETRAGERE =&gt; start_sold &lt;= '1'; en_scazator &lt;= '1'; we2 &lt;= '1'; NXSTARE &lt;= START;
	when OPTIUNE_3 =&gt; pin_en_comp2 &lt;= '1'; 
		if egal2 = '1' then NXSTARE &lt;= SCHIMBARE_PIN;
		else NXSTARE &lt;= START;
		end if;
	when SCHIMBARE_PIN =&gt; we1 &lt;= '1'; NXSTARE &lt;= START;
	when OPTIUNE_4 =&gt; start_pin &lt;= '1'; NXSTARE &lt;= START;
end case;
end process;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="comparator_1000">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY comparator_1000 IS
  PORT (
  		ENABLE_COMP: in std_logic;
  		SOLD_RETRAS: in std_logic_vector (15 downto 0);
  		EGAL: out std_logic;
  		MAI_MIC: out std_logic
    );
END comparator_1000;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF comparator_1000 IS

BEGIN
process(ENABLE_COMP)
begin
MAI_MIC &lt;= '0'; EGAL &lt;= '0';
case ENABLE_COMP is 
when '1' =&gt;
	if SOLD_RETRAS = x"03e8" then
		EGAL &lt;= '1'; MAI_MIC &lt;= '0';
	elsif SOLD_RETRAS &lt; x"03e8" then
		MAI_MIC &lt;= '1'; EGAL &lt;= '0';
	else
		MAI_MIC &lt;= '0'; EGAL &lt;= '0';
	end if;
when others =&gt; MAI_MIC &lt;= '0'; EGAL &lt;= '0';
end case;

end process;



END TypeArchitecture;
</vhdl>
  <vhdl name="SI_2_intrari">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY SI_2_intrari IS&#13;
  PORT (&#13; a, b: in std_logic;
  c: out std_logic
    );&#13;
END SI_2_intrari;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF SI_2_intrari IS&#13;
&#13;
BEGIN&#13;
&#13;
c &lt;= a and b;
&#13;
END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="counter">--------------------------------------------------------------------------------
-- Project :
-- File    :
-- Autor   :
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_UNSIGNED.all;

ENTITY counter IS
  PORT (
  	clk, enable: in std_logic;
  	R: in std_logic;
  	bit_16_15: out std_logic_vector(1 downto 0)
    );
END counter;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE comportamental OF counter IS

BEGIN

	process (clk, enable)
	variable count: std_logic_vector (16 downto 0) := "00000000000000000";
	begin
	case enable is
	when '1' =&gt;
		if clk='1' and clk'event then
			if R = '0' then count := "00000000000000000";
			else
				count := count + 1999999999;
			end if;
		end if;
		bit_16_15 &lt;= count(16) &amp; count(15);
	when others =&gt; bit_16_15 &lt;= "00";
	end case;
	end process;

END comportamental;
</vhdl>
  <vhdl name="mux_bcd">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;&#13;
USE ieee.std_logic_1164.all;&#13;
&#13;
ENTITY mux_bcd IS&#13;
  PORT (&#13; sel: in std_logic_vector(1 downto 0);
  input0, input1, input2, input3: in std_logic_vector(3 downto 0);
  output: out std_logic_vector(3 downto 0)
    );&#13;
END mux_bcd;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF mux_bcd IS&#13;
&#13;
BEGIN&#13;
&#13;
process(sel,input0,input1,input2,input3)
begin
	case sel is
	when "00" =&gt; output &lt;= input0;
	when "01" =&gt; output &lt;= input1;
	when "10" =&gt; output &lt;= input2;
	when "11" =&gt; output &lt;= input3;
	when others =&gt; output&lt;="ZZZZ";
	end case;
end process;
&#13;
END TypeArchitecture;&#13;
</vhdl>
</project>
